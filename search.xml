<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[午餐約會]]></title>
    <url>%2F2019%2F08%2F22%2F%E5%8D%88%E9%A4%90%E7%B4%84%E6%9C%83%2F</url>
    <content type="text"><![CDATA[或許不久的將來會笑笑，就紀錄一下今天主管打電話請場蟹約我跟另外一位同事中午聊聊 會談的內容大約是釐清目前的工作項目、未來規劃等等 其中，也是促使我想書寫此篇的一個段落 主: OO你會想要寫、接觸後端嗎？(開始一連串描述…)同: 我覺得ＯＯ很可惜，雖然他懂的業務邏輯，但他不會後端程式及資料庫…..... 後來回程時，同事希望我想想要不要精進資料庫的能力因為他認爲很多頭頭都不太重視前端 但我也不停的想，或許他是對的，但以我現在還在追逐JS的階段真的適合現在這個時間點點其他領域的技能值嗎？ 只好慢慢看下去…]]></content>
      <categories>
        <category>東興路上</category>
      </categories>
      <tags>
        <tag>嘰嘰雜雜</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gulp初探]]></title>
    <url>%2F2019%2F08%2F18%2FGulp%E5%88%9D%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[| 介紹gulp 官網 gulp是一個開源JavaScript工具包，由Eric Sc​​hoffstall創建，用作前端Web開發中的流構建系統。 它是一個基於Node.js和npm的任務運行器，用於自動化Web開發中涉及的耗時和重複性任務，如縮小，連接，緩存清除，單元測試，linting，優化等。 Gulp 四個基本API：： name discript gulp.task 執行任務 gulp.src 執行資料來源 gulp.dest 執行結果位置 gulp.watch 監視執行過程中，資料是否變更 操作事件使用pipe(), 其串接概念圖如下: | 安裝與Try It (mac經驗)STEP 1. 於terminal 輸入 sudo npm install gulp -g -g 安裝在目前的電腦上, 目的是啟用 “gulp” 這個指令當完成安裝時, 輸入gulp -v, 當terminal回應 command not found, 試著：輸入export PATH=$PATH:/Users/denis/.npm-global/bin STEP 2. 建立新檔案夾、npm init STEP 3. npm install gulp –save 裝在目前的專案資料夾內, 目的是執行 gulp 時可以取用的套件 STEP 4. 建立新檔案新增一個gulpfile.js 、source/ index.html STEP 5. 於gulpfile.js建立資料 1234567var gulp = require('gulp')// copyHTML 為自定義任務名稱gulp.task('copyHTML', function() { // 抓取source 裡的所有HTML return gulp.src('./source/**/*.html') .pipe(gulp.dest('./public/'))}) STEP 6. 於terminal執行Gulp 1gulp [任務名稱 ] ex: gulp copyHTML]]></content>
      <categories>
        <category>前端學習</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[網頁安全性驗證]]></title>
    <url>%2F2019%2F08%2F17%2F%E7%B6%B2%E9%A0%81%E5%AE%89%E5%85%A8%E6%80%A7%E9%A9%97%E8%AD%89%2F</url>
    <content type="text"><![CDATA[含有內容、ISSUE、解決方式、後記 || 專案內容使用者於LINE官方帳號點擊會員卡連結(API)，系統會進行LINE LOGIN 得知特定身份後，將UID置於連結，並導頁至會員卡網頁;而前端人員拿取UID打API取得會員卡資料。 || 專案ISSUE有位使用者複製LOGIN後的連結(含有UID資訊)，接著使用其他裝置點擊其連結，發現仍可以看到會員卡，故認為其有安全性的憂慮，且有違反歐洲的某的法規，因此要求改善。 || 解決方式 LINE LOGIN將Line 一次性的參數置入連結 前端人員取得連結參數, 打API再次驗證連結參數正確性 驗證成功後, Response Headers 多一個key 打API取會員卡資料時，Request Headers 多增加ㄧkey參數 若步驟2失敗時, 再走一次步驟1 || 後記 若之後其他使用者再複製此連結時，因為一次性參數原則，會再要求依據登入帳號密碼，執行LINE LOGIN驗證，也加強了安全性。 但這樣的一次性參數的安全性修正也苦了測試人員及開發人員，在手機端，因為是已登入APP狀態，所以不會要求輸入帳號密碼，也不會影響體驗 ; 但如果在網頁端，相關人員就要一直輸入帳號密碼或點擊確認輸入按鈕，嗚嗚嗚！ 美廉社 SimpleMart 經驗紀錄]]></content>
      <categories>
        <category>專案</category>
      </categories>
      <tags>
        <tag>專案經驗</tag>
        <tag>安全性驗證</tag>
      </tags>
  </entry>
</search>
